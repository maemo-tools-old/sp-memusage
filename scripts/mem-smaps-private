#!/bin/sh
#
# Script for calculating private memory usage for given process PIDs.
# This file is part of sp-memusage.
#
# Copyright (C) 2006-2010 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

if [ $# -lt 1 ]; then
	echo
	echo "usage: ${0##*/} <process PIDs>"
	echo
	echo "print the process(es) private memory usage according to SMAPS."
	echo
	echo "examples:"
	echo "  ${0##*/} \$(pidof pulseaudio)"
	echo "or:"
	echo "  cd /proc"
	echo "  ${0##*/} [0-9]*"
	echo
	exit 1
fi

output_smaps_info()
{
	if [ \! -d /proc/$1 ]; then
		echo "ERROR: PID $1 doesn't exist!"
		return
	fi
	smaps=/proc/$1/smaps
	if [ \! -f $smaps ]; then
		echo "ERROR: $smaps SMAPS file doesn't exist!"
		return
	fi
	cmd=$(tr '\0' ' ' < /proc/$1/cmdline)
	if [ -z "$cmd" ]; then
		echo "PID $1 is a kernel thread"
		return
	fi
	bin=${cmd%% *}
	opt=${cmd#* }
	echo "PID $1: ${bin##*/} $opt"
	awk '
/^Swap:/	  { swap   += $2; next }
/^Private_Dirty:/ { pdirty += $2; next }
/^Shared_Dirty:/  { sdirty += $2; next }
/^Private_Clean:/ { pclean += $2; next }
/^Pss:/		  { pss    += $2; next }
END {
	printf("- Swapped dirty memory:  %6d kB\n", swap);
	printf("- Private dirty memory:  %6d kB\n", pdirty);
	printf("- Shared  dirty memory:  %6d kB\n", sdirty);
	printf("- Clean private memory:  %6d kB\n", pclean);
	printf("- Proportional set size: %6d kB\n", pss);
}' $smaps
}

for pid in $*; do
	output_smaps_info $pid
done
